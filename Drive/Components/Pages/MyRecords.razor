@page "/records"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using Drive.Data;
@using Drive.Data.Entity

@rendermode InteractiveServer

@inject ApplicationDbContext dbContext
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

@* @attribute [Authorize] *@

<PageTitle>Entries</PageTitle>

<h3 class="text-center fw-bold mb-4">Gesamte Buchungen</h3>

<div class="container">
    <div class="row">
        <div class="col">
            <EditForm Model="@mytour" FormName="addEntry" OnValidSubmit="SaveEntry">
                <div class="form-group">
                    <label for="companyCars" class="text-center mb-2">Auto</label>
                    <select id="companyCars" @bind="selectedProjectId" class="form-control mb-3">
                        @foreach (var project in cars)
                        {
                            <option value="@project.Id">@project.Brand</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label for="description" class="text-center mb-2">Beschreibung</label>
                    <input id="description" class="form-control mb-2" @bind-value="mytour.Description" />
                </div>
                <div class="form-group w-50 ">
                    <label for="date" class="text-center mb-2">Datum</label>
                    <input asp-for="mytour.Date" class="form-control mb-4 align-self-center" type="date" />


                </div>
                <div class="form-group w-50 ">
                    <label for="start" class="text-center mb-2">Beginn</label>
                    <input id="start" @bind-value="mytour.Start" class="form-control mb-4 align-self-center" type="time" />
                </div>
                <div class="form-group w-50 ">
                    <label for="end" class="text-center mb-2">Abschluss</label>
                    <input id="end" @bind-value="mytour.End" class="form-control mb-4 align-self-center" type="time" />
                </div>
                <div class="form-group w-50">
                    <label for="odometerStart" class="text-center mb-2">Odometer Start</label>
                    <input id="odometerStart" class="form-control mb-4 align-self-center" @bind-value="mytour.OdometerStart" />
                </div>
                <div class="form-group w-50">
                    <label for="odometerEnd" class="text-center mb-2">Odometer End</label>
                    <input id="odometerEnd" class="form-control  mb-4 align-self-center" @bind-value="mytour.OdometerEnd" />
                </div>

                <button class="btn btn-primary w-20 mb-2">Buchung abschließen</button>
            </EditForm>
        </div>
        <p>

        </p>
        <div class="col">
            <table class="table">
                <thead>
                    <tr>
                    @* <th>Id</th> *@
                    <th>Titel</th>
                    <th>Beschreibung</th>
                    <th>Stunden</th>
                        <th>Km Abfart</th>
                        <th>Km Ankunft</th>
                        <th>Reiseweg</th>
                        <th>Mitarbeiter</th>


                    </tr>
                </thead>
                <tbody>
                    @foreach (var entry in tours)
                    {
                        <tr>
                            @* <td>@entry.Id</td> *@
                            <td>@entry.Car.Brand</td>
                            <td>@entry.Car.Model</td>
                            <td>@entry.HoursWorked</td>
                            <td>@entry.OdometerStart</td>
                            <td>@entry.OdometerEnd</td>
                            <td>@entry.DistanceTraveled</td>
                            <td>@entry.Employee</td>
                            <td>
                                <button @onclick="() => EditEntry(entry)">Edit</button>
                                <button @onclick="() => DeleteEntry(entry)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    // Current logged in user
    ApplicationUser currentUser;

    List<Car> cars = new();

    List<Tours> tours = new();

    Tours mytour = new();

    int selectedProjectId = 1;

    protected override async Task OnInitializedAsync()
    {
        // Refresh the lists of cars and tours
        Refresh();

        ClaimsPrincipal userClaims = (await SignInManager.Context.AuthenticateAsync()).Principal;

        if (userClaims != null)
            currentUser = await UserManager.GetUserAsync(userClaims);

        if (currentUser is null)
            return;

        // Initialize a new tour with the current date and the current user's details
        mytour = new()
            {
                Date = DateOnly.FromDateTime(DateTime.Now),
                Employee = currentUser,
                EmployeeId = currentUser.Id
            };
    }

    // This method refreshes the lists of cars and tours
    void Refresh()
    {
        cars = dbContext.Cars.ToList();
        tours = dbContext.Tours.ToList();
    }

    // This method saves a tour
    void SaveEntry()
    {
        // Set the car ID and car of the tour
        mytour.CardId = selectedProjectId;
        mytour.Car = cars.First(x => x.Id == selectedProjectId);

        // Calculate the distance traveled
        mytour.DistanceTraveled = mytour.OdometerEnd - mytour.OdometerStart;

        // Add the tour to the database and save changes
        dbContext.Tours.Add(mytour);
        dbContext.SaveChanges();

        // Reset the tour for the next entry
        mytour = new Tours
            {
                Date = DateOnly.FromDateTime(DateTime.Now),
                Employee = currentUser,
                EmployeeId = currentUser.Id,
                // Initialize OdometerStart for the next entry if needed
                OdometerStart = mytour.OdometerEnd,
            };

        // Refresh the list of tours
        Refresh();
    }

    // This method deletes a tour
    void DeleteEntry(Tours tour)
    {
        // Remove the tour from the database and save changes
        dbContext.Tours.Remove(tour);
        dbContext.SaveChanges();

        // Refresh the list of tours
        Refresh();
    }

    // This method edits a tour
    void EditEntry(Tours tour)
    {
        // Set the tour to the tour that is passed in
        mytour = tour;
    }
}